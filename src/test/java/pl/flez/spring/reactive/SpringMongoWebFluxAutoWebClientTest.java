package pl.flez.spring.reactive;

import static org.junit.Assert.assertEquals;

import java.text.MessageFormat;
import java.util.Collections;
import java.util.List;

import org.bson.types.ObjectId;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.reactive.server.WebTestClient;
import org.springframework.web.reactive.function.BodyInserters;

import pl.flez.spring.reactive.data.User;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class SpringMongoWebFluxAutoWebClientTest {

	@Autowired
	private WebTestClient webTestClient;
	public final static String path = "/user";
	public final static String pathOne = path + "/{0}";
	public final static String pathExample = path + "/find";
	public final static String pathOneExample = path + "/find-one";
	private final ParameterizedTypeReference<List<User>> reference = new ParameterizedTypeReference<List<User>>() {};

	@Test
	public void testAutoGeneratedPost() {
		User object = createMockObject();
		// POST
		User returnResult =  webTestClient.post().uri(path).body(BodyInserters.fromObject(object)).exchange()
		.expectStatus().isOk().expectBody(User.class).returnResult().getResponseBody();		
		assertEquals(object.getName(), returnResult.getName());
		
		// GET /{id}
		webTestClient.get().uri(MessageFormat.format(pathOne, new Object[]{returnResult.getId()})).accept(MediaType.APPLICATION_JSON).exchange()
		.expectStatus().isOk().expectBody(User.class).isEqualTo(returnResult);
		
		// GET /{id} 404
		webTestClient.get().uri(MessageFormat.format(pathOne, new Object[]{new ObjectId()})).accept(MediaType.APPLICATION_JSON).exchange()
		.expectStatus().isNotFound();
		
		// POST /find-one
		webTestClient.post().uri(pathOneExample).body(BodyInserters.fromObject(returnResult)).accept(MediaType.APPLICATION_JSON).exchange()
		.expectStatus().isOk().expectBody(User.class).isEqualTo(returnResult);
		
		// GET /		
		webTestClient.get().uri(path).accept(MediaType.APPLICATION_JSON).exchange()
		.expectStatus().isOk().expectBody(reference).isEqualTo(Collections.singletonList(returnResult));
		
		// GET /find
		webTestClient.post().uri(pathExample).body(BodyInserters.fromObject(object)).accept(MediaType.APPLICATION_JSON).exchange()
		.expectStatus().isOk().expectBody(reference).isEqualTo(Collections.singletonList(returnResult));
		
		// DELETE
		webTestClient.delete().uri(MessageFormat.format(pathOne, new Object[]{returnResult.getId()})).accept(MediaType.APPLICATION_JSON).exchange()
		.expectStatus().isOk().expectBody(Void.class);	
		
		// GET /{id} 404
		webTestClient.get().uri(MessageFormat.format(pathOne, new Object[]{returnResult.getId()})).accept(MediaType.APPLICATION_JSON).exchange()
		.expectStatus().isNotFound();		
	}

	private static User createMockObject() {
		User object = new User();
		object.setName("Imie");
		object.setSurname("Nazwisko");
		object.setEmail("email@email.com");
		return object;
	}
	
}
